variables: 
# - name: MONGO_URI
#   value: "mongodb+srv://supercluster.d83jj.mongodb.net/superData"
# - name: MONGO_USERNAME
#   value: "superuser"
# - name: MONGO_PASSWORD
#   value: "SuperPassword"
- group: "mongo_server_creds"
trigger:
  branches:
    include:
      - main

# Define the stages of the pipeline
stages:

  # Build stage
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildJob
        displayName: 'Build Job'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: |
              echo "Setting environment variables..."
              echo "##vso[task.setvariable variable=MONGO_URI;isOutput=true]$(MONGO_URI)"
              echo "##vso[task.setvariable variable=MONGO_USERNAME;isOutput=true]$(MONGO_USERNAME)"
              echo "##vso[task.setvariable variable=MONGO_PASSWORD;isOutput=true]$(MONGO_PASSWORD)"
              echo "##vso[task.setvariable variable=MONGO_TEST;isOutput=true]test123"
            name: setVarsStep
            displayName: 'Set multiple environment variables'

          - task: NodeTaskRunnerInstaller@0
            inputs:
              nodeVersion: '16'
          - script: |
              echo "Installing dependencies"
              npm install
            displayName: 'Install Dependencies'
          - script: |
              printenv
            displayName: Print environment variables
          - script: |
              echo "Testing the project"
              npm test
            displayName: 'Code Testing'
          - script: |
              echo "Running coverage on the project"
              npm run coverage
            displayName: 'Code Coverage'
          - task: PublishCodeCoverageResults@2
            condition: always()
            displayName: 'Publish Code Coverage'
            inputs:
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/**/cobertura-coverage.xml"
          - task: PublishBuildArtifacts@1
            condition: always()
            inputs:
              PathtoPublish: "$(System.DefaultWorkingDirectory)/test-results.xml"
              ArtifactName: "_drop"
              publishLocation: "Container"
          - publish: $(Build.ArtifactStagingDirectory)
            artifact: 'drop'
            displayName: 'Publish Artifact'

  # Test stage (conditional on successful build)
  - stage: Test
    displayName: 'Test Stage'
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: SAST
        displayName: 'SonarQube Analysis'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - task: SonarQubePrepare@7
          inputs:
            SonarQube: 'ado_sonarqube'
            scannerMode: 'cli'
            configMode: 'manual'
            cliProjectKey: 'devsecops'
            cliProjectName: 'devsecops'
            cliSources: '.'
            extraProperties: |
               sonar.branch.name=$(Build.SourceBranchName)
               sonar.verbose=true
               sonar.language=js

        - task: SonarQubeAnalyze@6
          displayName: 'Run SonarQube analysis'


  # # Deploy stage (conditional on successful tests)
  # - stage: Deploy
  #   displayName: 'Deploy Stage'
  #   dependsOn: Test
  #   condition: succeeded()
  #   jobs:
  #     - deployment: DeployApp
